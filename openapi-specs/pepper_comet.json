{"swagger": "2.0", "basePath": "/", "paths": {"/api/atomic/infer": {"parameters": [{"name": "event", "in": "query", "type": "string", "required": true, "description": "\"atomic\":\n        Provide a seed event such as \"PersonX goes to the mall\"\n        Don't include names, instead replacing them with PersonX, PersonY, etc.\n        The event should always have PersonX included\n    \"conceptnet\":\n        Provide a seed entity such as \"go to the mall\"\n        Because the model was trained on lemmatized entities,\n        it works best if the input entities are also lemmatized\n    "}, {"name": "rel", "in": "query", "type": "array", "description": "\"atomic\":\n        Enter a possible effect type from the following effect types:\n        all - compute the output for all effect types\n        oEffect\nxIntent\noWant\nxAttr\nxNeed\nxWant\nxEffect\nxReact\noReact\n\n    \"conceptnet\":\n        Enter a possible relation from the following list:\n        all - compute the output for all effect types\n        NotIsA\nHasFirstSubevent\nInstanceOf\nUsedFor\nRelatedTo\nMotivatedByGoal\nHasA\nHasPainIntensity\nNotMadeOf\nDesireOf\nCausesDesire\nHasProperty\nSymbolOf\nIsA\nAtLocation\nMadeOf\nCreatedBy\nLocationOfAction\nNotCapableOf\nHasPainCharacter\nLocatedNear\nNotHasProperty\nNotHasA\nReceivesAction\nDefinedAs\nPartOf\nCauses\nNotDesires\nHasSubevent\nHasPrerequisite\nCapableOf\nHasLastSubevent\nInheritsFrom\nDesires\n\n        NOTE: Capitalization is important\n    ", "default": ["all"], "items": {"type": "string"}, "collectionFormat": "multi"}, {"name": "sample", "in": "query", "type": "string", "description": "Provide a sampling algorithm to produce the sequence with from the following:\n    greedy\n    beam-# where # is the beam size\n    topk-# where # is k\n    ", "default": "greedy"}], "get": {"responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Atomic"}}}, "operationId": "get_atomic", "parameters": [{"name": "X-Fields", "in": "header", "type": "string", "format": "mask", "description": "An optional fields mask"}], "tags": ["default"]}}, "/api/conceptnet/infer": {"parameters": [{"name": "event", "in": "query", "type": "string", "required": true, "description": "\"atomic\":\n        Provide a seed event such as \"PersonX goes to the mall\"\n        Don't include names, instead replacing them with PersonX, PersonY, etc.\n        The event should always have PersonX included\n    \"conceptnet\":\n        Provide a seed entity such as \"go to the mall\"\n        Because the model was trained on lemmatized entities,\n        it works best if the input entities are also lemmatized\n    "}, {"name": "rel", "in": "query", "type": "array", "description": "\"atomic\":\n        Enter a possible effect type from the following effect types:\n        all - compute the output for all effect types\n        oEffect\nxIntent\noWant\nxAttr\nxNeed\nxWant\nxEffect\nxReact\noReact\n\n    \"conceptnet\":\n        Enter a possible relation from the following list:\n        all - compute the output for all effect types\n        NotIsA\nHasFirstSubevent\nInstanceOf\nUsedFor\nRelatedTo\nMotivatedByGoal\nHasA\nHasPainIntensity\nNotMadeOf\nDesireOf\nCausesDesire\nHasProperty\nSymbolOf\nIsA\nAtLocation\nMadeOf\nCreatedBy\nLocationOfAction\nNotCapableOf\nHasPainCharacter\nLocatedNear\nNotHasProperty\nNotHasA\nReceivesAction\nDefinedAs\nPartOf\nCauses\nNotDesires\nHasSubevent\nHasPrerequisite\nCapableOf\nHasLastSubevent\nInheritsFrom\nDesires\n\n        NOTE: Capitalization is important\n    ", "default": ["all"], "items": {"type": "string"}, "collectionFormat": "multi"}, {"name": "sample", "in": "query", "type": "string", "description": "Provide a sampling algorithm to produce the sequence with from the following:\n    greedy\n    beam-# where # is the beam size\n    topk-# where # is k\n    ", "default": "greedy"}], "get": {"responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/ConceptNet"}}}, "operationId": "get_conceptnet", "parameters": [{"name": "X-Fields", "in": "header", "type": "string", "format": "mask", "description": "An optional fields mask"}], "tags": ["default"]}}}, "info": {"title": "COMET API", "version": "1.0", "description": "COMET common knowledge inference"}, "produces": ["application/json"], "consumes": ["application/json"], "tags": [{"name": "default", "description": "Default namespace"}], "definitions": {"Atomic": {"properties": {"oEffect": {"$ref": "#/definitions/AtomicEntry"}, "xIntent": {"$ref": "#/definitions/AtomicEntry"}, "oWant": {"$ref": "#/definitions/AtomicEntry"}, "xAttr": {"$ref": "#/definitions/AtomicEntry"}, "xNeed": {"$ref": "#/definitions/AtomicEntry"}, "xWant": {"$ref": "#/definitions/AtomicEntry"}, "xEffect": {"$ref": "#/definitions/AtomicEntry"}, "xReact": {"$ref": "#/definitions/AtomicEntry"}, "oReact": {"$ref": "#/definitions/AtomicEntry"}}, "type": "object"}, "AtomicEntry": {"properties": {"event": {"type": "string"}, "beams": {"type": "array", "items": {"type": "string"}}}, "type": "object"}, "ConceptNet": {"properties": {"NotIsA": {"$ref": "#/definitions/ConceptNetEntry"}, "HasFirstSubevent": {"$ref": "#/definitions/ConceptNetEntry"}, "InstanceOf": {"$ref": "#/definitions/ConceptNetEntry"}, "UsedFor": {"$ref": "#/definitions/ConceptNetEntry"}, "RelatedTo": {"$ref": "#/definitions/ConceptNetEntry"}, "MotivatedByGoal": {"$ref": "#/definitions/ConceptNetEntry"}, "HasA": {"$ref": "#/definitions/ConceptNetEntry"}, "HasPainIntensity": {"$ref": "#/definitions/ConceptNetEntry"}, "NotMadeOf": {"$ref": "#/definitions/ConceptNetEntry"}, "DesireOf": {"$ref": "#/definitions/ConceptNetEntry"}, "CausesDesire": {"$ref": "#/definitions/ConceptNetEntry"}, "HasProperty": {"$ref": "#/definitions/ConceptNetEntry"}, "SymbolOf": {"$ref": "#/definitions/ConceptNetEntry"}, "IsA": {"$ref": "#/definitions/ConceptNetEntry"}, "AtLocation": {"$ref": "#/definitions/ConceptNetEntry"}, "MadeOf": {"$ref": "#/definitions/ConceptNetEntry"}, "CreatedBy": {"$ref": "#/definitions/ConceptNetEntry"}, "LocationOfAction": {"$ref": "#/definitions/ConceptNetEntry"}, "NotCapableOf": {"$ref": "#/definitions/ConceptNetEntry"}, "HasPainCharacter": {"$ref": "#/definitions/ConceptNetEntry"}, "LocatedNear": {"$ref": "#/definitions/ConceptNetEntry"}, "NotHasProperty": {"$ref": "#/definitions/ConceptNetEntry"}, "NotHasA": {"$ref": "#/definitions/ConceptNetEntry"}, "ReceivesAction": {"$ref": "#/definitions/ConceptNetEntry"}, "DefinedAs": {"$ref": "#/definitions/ConceptNetEntry"}, "PartOf": {"$ref": "#/definitions/ConceptNetEntry"}, "Causes": {"$ref": "#/definitions/ConceptNetEntry"}, "NotDesires": {"$ref": "#/definitions/ConceptNetEntry"}, "HasSubevent": {"$ref": "#/definitions/ConceptNetEntry"}, "HasPrerequisite": {"$ref": "#/definitions/ConceptNetEntry"}, "CapableOf": {"$ref": "#/definitions/ConceptNetEntry"}, "HasLastSubevent": {"$ref": "#/definitions/ConceptNetEntry"}, "InheritsFrom": {"$ref": "#/definitions/ConceptNetEntry"}, "Desires": {"$ref": "#/definitions/ConceptNetEntry"}}, "type": "object"}, "ConceptNetEntry": {"properties": {"event": {"type": "string"}, "beams": {"type": "array", "items": {"type": "string"}}}, "type": "object"}}, "responses": {"ParseError": {"description": "When a mask can't be parsed"}, "MaskError": {"description": "When any error occurs on mask"}}}
